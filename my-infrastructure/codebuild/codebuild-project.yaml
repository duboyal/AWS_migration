# big question is how to access the AWS variables 

env:
  image_name: my-image #whatever we want to name image
  docker_filepath  : "codebuild/Dockerfile"
  environment_type  : "LINUX_CONTAINER"
  environment_image  : "aws/codebuild/docker:18.09"
  # region: us-west-2
  # ecr_repository_uri: <YOUR_ECR_REPOSITORY_URI> #will have to be real repo uri


#docker tag ${env:image_name}:latest ${env:ecr_repository_uri}

Resources:
  CodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: "MyCodeBuildProject"
      BuildSpec: !Sub |
        ${codebuild.buildspec}
      Artifacts:
        Type: "CODEPIPELINE"
      Environment:
        Type: ${env:environment_type}
        Image: ${env:environment_image}
        EnvironmentVariables:
          - Name: "DOCKERFILE_PATH"
            Value: ${env:docker_filepath} # corresponds to path from final yaml template (global bc codefile)
      ServiceRole: !Ref CodeBuildServiceRole
      # ServiceRole: !GetAtt CodeBuildServiceRole.Arn #from ServiceRole: !Ref CodeBuildServiceRole


# This YAML file is a CloudFormation template for creating an AWS CodeBuild project. 
# CodeBuild is a fully managed build service that compiles source code, runs tests, and 
# produces software packages that are ready to deploy.

# In this file, the env section defines environment variables that can be used in other parts of the file. 
# For example, image_name sets the name of the Docker image that will be built.

# The Resources section defines the CodeBuild project using the AWS::CodeBuild::Project resource type. 
# The Name property sets the name of the project, and the BuildSpec property references a build specification 
# file that defines how to build the Docker image. The Artifacts property specifies the type of artifacts that the project produces,
# and the Environment property specifies the type of environment to use for the build.

# The ServiceRole property references a service role that defines the permissions that the project has to access other AWS resources.
